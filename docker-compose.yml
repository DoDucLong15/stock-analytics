services:
  cassandra1:
    image: cassandra:4.0
    container_name: cassandra1
    ports:
      - "9042:9042"
    networks:
      - vnstock-net
    environment:
      - CASSANDRA_CLUSTER_NAME=vnstock_cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra1

  cassandra2:
    image: cassandra:4.0
    container_name: cassandra2
    networks:
      - vnstock-net
    environment:
      - CASSANDRA_CLUSTER_NAME=vnstock_cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra1

  cassandra3:
    image: cassandra:4.0
    container_name: cassandra3
    networks:
      - vnstock-net
    environment:
      - CASSANDRA_CLUSTER_NAME=vnstock_cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra1
  spark-submit-app:
    build:
      context: spark
      dockerfile: Dockerfile
    environment:
      SPARK_APPLICATION_PYTHON_LOCATION: /app/spark.py
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
      - kafka1
      - kafka2
      - kafka3
      - elasticsearch
    networks:
      - vnstock-net
      - elastic-network
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8079:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - vnstock-net
      - elastic-network
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - vnstock-net
      - elastic-network
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - vnstock-net
      - elastic-network
  zookeeper:
    # restart: always
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - vnstock-net
  kafka1:
    container_name: kafka1
    # restart: always
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9093:9093"
    volumes:
      - "kafka1-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - vnstock-net
  kafka2:
    container_name: kafka2
    # restart: always
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9095:9095"
    volumes:
      - "kafka2-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9094,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka2:9094,EXTERNAL://localhost:9095
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - vnstock-net
  kafka3:
    container_name: kafka3
    # restart: always
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9097:9097"
    volumes:
      - "kafka3-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9096,EXTERNAL://:9097
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka3:9096,EXTERNAL://localhost:9097
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - vnstock-net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    networks:
      - elastic-network
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elastic-network
  namenode:
    image: bde2020/hadoop-namenode:1.1.0-hadoop2.8-java8
    container_name: namenode
    volumes:
      - ./data/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=vnstock
    env_file:
      - ./hadoop.env
    ports:
      - 50070:50070
      - 8020:8020
    networks:
      - vnstock-net
  datanode1:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.8-java8
    depends_on:
      - namenode
    volumes:
      - ./data/datanode1:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:8020
    env_file:
      - ./hadoop.env
    ports:
      - 50075:50075
    networks:
      - vnstock-net
  datanode2:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.8-java8
    depends_on:
      - namenode
    volumes:
      - ./data/datanode2:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:8020
    env_file:
      - ./hadoop.env
    ports:
      - 50076:50076
    networks:
      - vnstock-net
  hue:
    image: bde2020/hdfs-filebrowser:3.11
    ports:
      - 8088:8088
    environment:
      - NAMENODE_HOST=namenode
    networks:
      - vnstock-net
volumes:
  kafka1-volume:
  kafka2-volume:
  kafka3-volume:
  zookeeper-volume:
networks:
  vnstock-net:
    name: mang-2
    driver: bridge
  elastic-network:
    driver: bridge